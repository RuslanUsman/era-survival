import React, { useState } from 'react';
import { useCart } from './CartContext';
import './CartPage.css';

function CartPage() {
    const { cart, removeFromCart } = useCart(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
    const [accountId, setAccountId] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState(false);

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const totalPrice = cart.reduce((acc, item) => acc + item.price * item.quantity, 0);

    // –õ–æ–≥–∏–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const handleOrderSubmit = async () => {
        setError('');
        setSuccess(false);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ ID –∞–∫–∫–∞—É–Ω—Ç–∞
        if (!accountId) {
            setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.');
            return;
        }
        if (!/^\d+$/.test(accountId)) {
            setError('ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.');
            return;
        }

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        const message = `
–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!
ID –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}

–¢–æ–≤–∞—Ä—ã:
${cart
    .map(
        (item) =>
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${item.name}
–û–ø–∏—Å–∞–Ω–∏–µ: ${item.description}
–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${item.price} —Ä—É–±.
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}
–°—É–º–º–∞: ${item.price * item.quantity} —Ä—É–±.
–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${process.env.PUBLIC_URL}${item.image}
---------------------`
    )
    .join('\n')}

–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice} —Ä—É–±.
        `;

        // –ú–∞—Å—Å–∏–≤ ID —á–∞—Ç–æ–≤
        const chatIds = ['5930230795', '389746882', '6008153078']; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ ID —á–∞—Ç–æ–≤

        try {
            const botToken = '8119819639:AAGSGevmAnNUG1qx_zssw-al6HG-s2XvikY'; // –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
            const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
            for (const chatId of chatIds) {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: message,
                    }),
                });

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç ${chatId}`);
                }
            }

            setSuccess(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        } catch (err) {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    };

    return (
        <div className="cart-page">
            <h1>–ö–æ—Ä–∑–∏–Ω–∞</h1>
            {cart.length > 0 ? (
                <div className="grid-container">
                    {cart.map((item) => (
                        <div key={item.id} className="cart-item">
                            {/* –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                            <img
                                src={`${process.env.PUBLIC_URL}${item.image}`}
                                alt={item.name}
                                onError={(e) => {
                                    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${item.image}`);
                                    e.target.src = `${process.env.PUBLIC_URL}/images/default.jpg`; // –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                }}
                            />
                            <div className="item-details">
                                <h2>{item.name}</h2>
                                <p>{item.description}</p>
                                <p>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item.price} —Ä—É–±.</p>
                                <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}</p>
                                <p>–°—É–º–º–∞: {item.price * item.quantity} —Ä—É–±.</p>
                                <button
                                    className="remove-button"
                                    onClick={() => removeFromCart(item.id)} // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                                >
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    ))}
                    <h2 className="total-price">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {totalPrice} —Ä—É–±.</h2>
                    <div className="order-section">
                        <input
                            type="text"
                            value={accountId}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
                            onChange={(e) => setAccountId(e.target.value)}
                        />
                        {error && <div className="error-message">{error}</div>}
                        {success && <div className="success-message">–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</div>}
                        <button onClick={handleOrderSubmit} className="order-button">
                            –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                        </button>
                    </div>
                </div>
            ) : (
                <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>
            )}
        </div>
    );
}

export default CartPage;


